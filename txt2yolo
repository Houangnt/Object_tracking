import json
import os
import sys 
sys.path.append("..")
import cv2
import numpy as np
import base64
from common import *

def write_to_json_file(save_path, version, label_boxes, shape_type, label_texts, imagePath, imageData, imageWidth, imageHeight):

    line_color = None
    fill_color = None
    shape_type = shape_type
    flags = {}
    lineColor = [0, 255, 0, 128]
    fillColor = [255, 0, 0, 128]
    shapes = []
    group_id = None

    num_objs = len(label_texts)

    if version == "5.0.1":
        for i in range(num_objs):
            shape = {
                "label" : label_texts[i], 
                "points" : label_boxes[i], 
                "group_id" : group_id,
                "shape_type" : shape_type, 
                "flags" : flags
            }
            shapes.append(shape)
        dictionary = {
            "version" : version, 
            "flags" : flags, 
            "shapes" : shapes,
            "imagePath" : imagePath,
            "imageData" : imageData, 
            "imageHeight": imageHeight, 
            "imageWidth" : imageWidth
        }    
    elif version == "3.16.7":
        for i in range(num_objs):
            shape = {
                "label" : label_texts[i], 
                "line_color" : line_color, 
                "fill_color" : fill_color, 
                "points" : label_boxes[i], 
                "shape_type" : shape_type, 
                "flags" : flags
            }
            shapes.append(shape)
        dictionary = {
            "version" : version, 
            "flags" : flags, 
            "shapes" : shapes,
            "lineColor" : lineColor, 
            "fillColor" : fillColor, 
            "imagePath" : imagePath,
            "imageData" : imageData, 
            "imageHeight": imageHeight, 
            "imageWidth" : imageWidth
        }
    # print(f'dictionary: {dictionary}')
    # dictionary = dictionary.encode('utf-8')
    json_object = json.dumps(dictionary, indent = 4)

    with open(save_path, "w") as json_file:
        # json.dump(dictionary, json_file)
        json_file.write(json_object)

def txt2json_yolov5():
    txt_folder = "/home/hoangnt107/Downloads/dataset_sticker_detection_v4.1/val/labels"
    json_folder = "/home/hoangnt107/Downloads/dataset_sticker_detection_v4.1/val/json"
    image_folder = "/home/hoangnt107/Downloads/dataset_sticker_detection_v4.1/val/images"
    
    exts = ['.jpg', '.png', '.JPG']

    for txt_file in os.listdir(txt_folder):
        if txt_file.split('.')[-1] == 'txt':
            txt_name = txt_file.split("/")[-1]
            txt_path = os.path.join(txt_folder, txt_name)
            json_name = txt_name.replace(".txt", ".json") 
            json_path = os.path.join(json_folder, json_name)
            
            image_names = [txt_name.replace(".txt", ext) for ext in exts]
            image_name = ""
            for name in image_names: 
                if os.path.exists(os.path.join(image_folder, name)): 
                    image_name = name

            if image_name != "":
                image_path = os.path.join(image_folder, image_name)
            else: 
                continue 

            fr = open(txt_path, "r")
            fw = open(json_path, "w")

            label_texts = []
            label_boxes = []
            img = cv2.imread(image_path)
            imageData = base64.b64encode(open(image_path, "rb").read()).decode('utf-8')
            # print(imageData)
            img_size = img.shape
            while True:
                line = fr.readline()
                if not line:
                    break
                paras = line.split()
                paras = [float(p) for idx, p in enumerate(paras)]

                label = str(int(paras[0]))
                x_center, y_center, w, h = paras[1:5]
                x_top_left = ((x_center - w / 2) * img_size[1])
                y_top_left = ((y_center - h / 2) * img_size[0])

                x_bottom_right = ((x_center + w / 2) * img_size[1])
                y_bottom_right = ((y_center + h / 2) * img_size[0])

                coor = [[x_top_left, y_top_left], [x_bottom_right, y_bottom_right]]

                standardlize_value_coordinates(img_size, coor)

                label_texts.append(label)
                label_boxes.append(coor)

                # print('paras', paras)
                # print('image name', img_name)
                # print('landmarks ', coor)
                # print('label', label)

            write_to_json_file(json_path, "3.16.7", label_boxes, "rectangle", label_texts, image_name, imageData, img_size[1], img_size[0])

            fr.close()
            fw.close()

def txt2json_yololandmark():
    txt_folder = "/home/hanhpm2/Downloads/CIC/yolov5/runs/detect/exp4/labels/"
    json_folder = "/home/hanhpm2/Downloads/CIC/yolov5/runs/detect/exp4/labels_json/"
    image_folder = "/home/hanhpm2/Downloads/CIC/20k_pdf2img/"
    
    for txt_file in os.listdir(txt_folder):
        if txt_file.split('.')[-1] == 'txt':
            txt_name = txt_file.split("/")[-1]
            txt_path = os.path.join(txt_folder, txt_name)
            json_name = txt_name.replace(".txt", ".json") 
            json_path = os.path.join(json_folder, json_name)
            image_name = txt_name.replace(".txt", ".jpg")
            image_path = os.path.join(image_folder, image_name)

            fr = open(txt_path, "r")
            fw = open(json_path, "w")

            label_texts = []
            label_boxes = []
            img = cv2.imread(image_path)
            imageData = base64.b64encode(open(image_path, "rb").read()).decode('utf-8')
            # print(imageData)
            img_size = img.shape
            while True:
                line = fr.readline()
                if not line:
                    break
                paras = line.split()
                paras = [float(p) for idx, p in enumerate(paras)]
                print('paras', paras)

                label = str(int(paras[0]))

                x_points = [x * img_size[1] for i, x in enumerate(paras[5:]) if i % 2 == 0]
                y_points = [y * img_size[0] for i, y in enumerate(paras[5:]) if i % 2 == 1]
                print(f"x_points {x_points}")
                print(f"y_points {y_points}")
             
                coor = [[x_points[i], y_points[i]] for i in range(len(x_points))]
                
                standardlize_value_coordinates(img_size, coor)

                label_texts.append(label)
                label_boxes.append(coor)

                # print('image name', img_name)
                print('landmarks ', coor)
                # print('label', label)

            write_to_json_file(json_path, "5.0.1", label_boxes, "polygon", label_texts, image_name, imageData, img_size[1], img_size[0])

            fr.close()
            fw.close()

txt2json_yolov5()